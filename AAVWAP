#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
using NinjaTrader.Gui.PropertiesTest;
using NinjaTrader.NinjaScript.MarketAnalyzerColumns;
#endregion

//This namespace holds Indicators in this folder and is required. Do not change it.
namespace NinjaTrader.NinjaScript.Indicators
{
	public class AutoAnchorVWAP : Indicator
	{
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Indicator here.";
				Name										= "AutoAnchorVWAP";
				Calculate									= Calculate.OnBarClose;
				IsOverlay									= true;
				DisplayInDataBox							= true;
				DrawOnPricePanel							= true;
				DrawHorizontalGridLines						= true;
				DrawVerticalGridLines						= true;
				PaintPriceMarkers							= true;
				ScaleJustification							= NinjaTrader.Gui.Chart.ScaleJustification.Right;
				//Disable this property if your indicator requires custom values that cumulate with each new market data event.
				//See Help Guide for additional information.
				IsSuspendedWhileInactive					= true;
				ShowDailyVWAP					= true;
				Show2DayVWAP					= true;
				ShowWeeklyVWAP					= true;
				ShowMonthlyVWAP					= true;
				AddPlot(new Stroke(Brushes.LightGray, DashStyleHelper.Dash, 1), PlotStyle.Line, "DailyVWAPStyle");
                AddPlot(new Stroke(Brushes.DarkGray, DashStyleHelper.Dash, 1), PlotStyle.Line, "TwoDayVWAPStyle");
                AddPlot(new Stroke(Brushes.Yellow, DashStyleHelper.Dash, 1), PlotStyle.Line, "WeeklyVWAPStyle");
                AddPlot(Brushes.DarkOrange, "MonthlyVWAPStyle");

            }
			else if (State == State.Configure)
			{
			}
			else if (State == State.DataLoaded)
			{
				sessionIterator = new SessionIterator(Bars);
            }
		}

		protected override void OnBarUpdate()
		{
			if (CurrentBar < 1)
				return;

            ohlc4 = ((Open[0] + High[0] + Low[0] + Close[0]) / 4);

            if (Bars.IsFirstBarOfSession)
			{
                cumulativeVolume = VOL()[0];
                cumulativeVolumePrice = VOL()[0] * ohlc4;

                if (Time[0].DayOfWeek == DayOfWeek.Sunday && (weekStart != Time[1].Date))
                {
                    Print(String.Format("This is the first bar of the trading week on {0} with D/T: {1} and current Day: {2}", Time[0].DayOfWeek, Time[0], Time[0].Day));
                    //Print(String.Format("Diff between Sunday and Today -> Sunday {0} % Today {1} = {2}", Time[0].DayOfWeek, Time[0].Day, currentDiff));
                    weekStart = Time[0].Date;
					weeklyVwap = 0;
                }
            }
            else
            {
                cumulativeVolume += VOL()[0];
                cumulativeVolumePrice += VOL()[0] * ohlc4;

				cumulativeWeeklyVolume += VOL()[0];
				cumulativeWeeklyVolumePrice += VOL()[0] * ohlc4;
            }

			// Check for prior session open
			if (Time[0].Day != Time[1].Day && (CurrentBar == 0))
			{
                Print("This is the first bar of the prior trading day at: " + Time[0]);
            }

            if (cumulativeVolume != 0)
                vwap = cumulativeVolumePrice / cumulativeVolume;

            if (cumulativeWeeklyVolume != 0)
                weeklyVwap = cumulativeWeeklyVolumePrice / cumulativeWeeklyVolume;

            // Check if new month
            if (Time[0].Month != Time[1].Month)
            {
                Print("This is the first bar of the new trading month at: " + Time[0]);
            }

            PlotDVwap[0] = vwap;
			//PlotWVwap[1] = weeklyVwap;
        }

		public int CheckIfStartOfNewWeek(DateTime currentDay, DayOfWeek startOfWeek)
		{
			int diff = (7 + (currentDay.DayOfWeek - startOfWeek)) % 7;
			return diff;
		}

		#region Properties
		[NinjaScriptProperty]
		[Display(Name="ShowDailyVWAP", Order=1, GroupName="Parameters")]
		public bool ShowDailyVWAP
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="Show2DayVWAP", Order=2, GroupName="Parameters")]
		public bool Show2DayVWAP
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="ShowWeeklyVWAP", Order=3, GroupName="Parameters")]
		public bool ShowWeeklyVWAP
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="ShowMonthlyVWAP", Order=4, GroupName="Parameters")]
		public bool ShowMonthlyVWAP
		{ get; set; }

		[Browsable(false)]
		[XmlIgnore]
		public Series<double> DailyVWAPStyle
		{
			get { return Values[0]; }
		}

        [Browsable(false)]
        [XmlIgnore]
        public Series<double> TwoDayVWAPStyle
        {
            get { return Values[1]; }
        }

        [Browsable(false)]
        [XmlIgnore]
        public Series<double> WeeklyVWAPStyle
        {
            get { return Values[0]; }
        }

        [Browsable(false)]
        [XmlIgnore]
        public Series<double> MonthlyVWAPStyle
        {
            get { return Values[3]; }
        }
        [Browsable(false)]
        [XmlIgnore]
        public Series<double> PlotDVwap
        {
            get { return Values[0]; }
        }
        [Browsable(false)]
        [XmlIgnore]
        public Series<double> Plot2DVwap
        {
            get { return Values[1]; }
        }
        [Browsable(false)]
        [XmlIgnore]
        public Series<double> PlotWVwap
        {
            get { return Values[2]; }
        }
        [Browsable(false)]
        [XmlIgnore]
        public Series<double> PlotMVwap
        {
            get { return Values[3]; }
        }
        #endregion

        SessionIterator sessionIterator;
        double cumulativeVolume = 0;
        double cumulativeVolumePrice = 0;
		double cumulativeTwoDayVolume = 0;
        double cumulativeTwoDayVolumePrice = 0;
		double cumulativeWeeklyVolume = 0;
        double cumulativeWeeklyVolumePrice = 0;
		double cumulativeMonthlyVolume = 0;
        double cumulativeVolumeMonthlyPrice = 0;
        double vwap = 0;
		double twoDayVwap = 0;
		double weeklyVwap = 0;
		double monthlyVwap = 0;
		double ohlc4 = 0;

        private DateTime previousSessionDate;
		private DateTime previousWeekStart;
        private DateTime weekStart;
        private double previousSessionOpen = 0;
        private bool previousSessionCaptured = false;
    }
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private AutoAnchorVWAP[] cacheAutoAnchorVWAP;
		public AutoAnchorVWAP AutoAnchorVWAP(bool showDailyVWAP, bool show2DayVWAP, bool showWeeklyVWAP, bool showMonthlyVWAP)
		{
			return AutoAnchorVWAP(Input, showDailyVWAP, show2DayVWAP, showWeeklyVWAP, showMonthlyVWAP);
		}

		public AutoAnchorVWAP AutoAnchorVWAP(ISeries<double> input, bool showDailyVWAP, bool show2DayVWAP, bool showWeeklyVWAP, bool showMonthlyVWAP)
		{
			if (cacheAutoAnchorVWAP != null)
				for (int idx = 0; idx < cacheAutoAnchorVWAP.Length; idx++)
					if (cacheAutoAnchorVWAP[idx] != null && cacheAutoAnchorVWAP[idx].ShowDailyVWAP == showDailyVWAP && cacheAutoAnchorVWAP[idx].Show2DayVWAP == show2DayVWAP && cacheAutoAnchorVWAP[idx].ShowWeeklyVWAP == showWeeklyVWAP && cacheAutoAnchorVWAP[idx].ShowMonthlyVWAP == showMonthlyVWAP && cacheAutoAnchorVWAP[idx].EqualsInput(input))
						return cacheAutoAnchorVWAP[idx];
			return CacheIndicator<AutoAnchorVWAP>(new AutoAnchorVWAP(){ ShowDailyVWAP = showDailyVWAP, Show2DayVWAP = show2DayVWAP, ShowWeeklyVWAP = showWeeklyVWAP, ShowMonthlyVWAP = showMonthlyVWAP }, input, ref cacheAutoAnchorVWAP);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.AutoAnchorVWAP AutoAnchorVWAP(bool showDailyVWAP, bool show2DayVWAP, bool showWeeklyVWAP, bool showMonthlyVWAP)
		{
			return indicator.AutoAnchorVWAP(Input, showDailyVWAP, show2DayVWAP, showWeeklyVWAP, showMonthlyVWAP);
		}

		public Indicators.AutoAnchorVWAP AutoAnchorVWAP(ISeries<double> input , bool showDailyVWAP, bool show2DayVWAP, bool showWeeklyVWAP, bool showMonthlyVWAP)
		{
			return indicator.AutoAnchorVWAP(input, showDailyVWAP, show2DayVWAP, showWeeklyVWAP, showMonthlyVWAP);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.AutoAnchorVWAP AutoAnchorVWAP(bool showDailyVWAP, bool show2DayVWAP, bool showWeeklyVWAP, bool showMonthlyVWAP)
		{
			return indicator.AutoAnchorVWAP(Input, showDailyVWAP, show2DayVWAP, showWeeklyVWAP, showMonthlyVWAP);
		}

		public Indicators.AutoAnchorVWAP AutoAnchorVWAP(ISeries<double> input , bool showDailyVWAP, bool show2DayVWAP, bool showWeeklyVWAP, bool showMonthlyVWAP)
		{
			return indicator.AutoAnchorVWAP(input, showDailyVWAP, show2DayVWAP, showWeeklyVWAP, showMonthlyVWAP);
		}
	}
}

#endregion
